{"ast":null,"code":"var _jsxFileName = \"/Users/neetishsharma/Desktop/Alchemy/Alchemy Projects/hello-world-dapp/starter-files/src/HelloWorld.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { helloWorldContract, connectWallet, updateMessage, loadCurrentMessage, getCurrentWalletConnected } from \"./util/interact.js\";\nimport alchemylogo from \"./alchemylogo.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HelloWorld = () => {\n  _s();\n\n  //state variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n\n  const [newMessage, setNewMessage] = useState(\"\"); //called only once\n\n  useEffect(() => {\n    async function fetchMessage() {\n      const message = await loadCurrentMessage();\n      setMessage(message);\n    }\n\n    fetchMessage();\n    addSmartContractListener();\n\n    async function fetchWallet() {\n      const {\n        address,\n        status\n      } = await getCurrentWalletConnected();\n      setWallet(address);\n      setStatus(status);\n    }\n\n    fetchWallet();\n    addWalletListener();\n  }, []);\n\n  function addSmartContractListener() {\n    helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n      if (error) {\n        setStatus(\"😥 \" + error.message);\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"🎉 Your message has been updated!\");\n      }\n    });\n  }\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://metamask.io/download.html`,\n          rel: \"noreferrer\",\n          children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this));\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onUpdatePressed = async () => {\n    //TODO: implement\n    const {\n      status\n    } = await updateMessage(walletAddress, newMessage);\n    setStatus(status);\n  }; //the UI of our component\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      id: \"logo\",\n      src: alchemylogo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"walletButton\",\n      onClick: connectWalletPressed,\n      children: walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        paddingTop: \"50px\"\n      },\n      children: \"Current Message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        paddingTop: \"18px\"\n      },\n      children: \"New Message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Update the message in your smart contract.\",\n        onChange: e => setNewMessage(e.target.value),\n        value: newMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"status\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"publish\",\n        onClick: onUpdatePressed,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HelloWorld, \"Gq/QBHQMC3uFvf9JJRa28vw0vHw=\");\n\n_c = HelloWorld;\nexport default HelloWorld;\n\nvar _c;\n\n$RefreshReg$(_c, \"HelloWorld\");","map":{"version":3,"sources":["/Users/neetishsharma/Desktop/Alchemy/Alchemy Projects/hello-world-dapp/starter-files/src/HelloWorld.js"],"names":["React","useEffect","useState","helloWorldContract","connectWallet","updateMessage","loadCurrentMessage","getCurrentWalletConnected","HelloWorld","walletAddress","setWallet","status","setStatus","message","setMessage","newMessage","setNewMessage","fetchMessage","addSmartContractListener","fetchWallet","address","addWalletListener","events","UpdatedMessages","error","data","returnValues","window","ethereum","on","accounts","length","connectWalletPressed","walletResponse","onUpdatePressed","alchemylogo","String","substring","paddingTop","e","target","value"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport {\n  helloWorldContract,\n  connectWallet,\n  updateMessage,\n  loadCurrentMessage,\n  getCurrentWalletConnected,\n} from \"./util/interact.js\";\n\nimport alchemylogo from \"./alchemylogo.svg\";\n\nconst HelloWorld = () => {\n  //state variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  //called only once\n  useEffect(() => {\n    async function fetchMessage() {\n      const message = await loadCurrentMessage();\n      setMessage(message);\n    }\n    fetchMessage();\n    addSmartContractListener();\n\n    async function fetchWallet() {\n      const { address, status } = await getCurrentWalletConnected();\n      setWallet(address);\n      setStatus(status);\n    }\n    fetchWallet();\n    addWalletListener();\n  }, []);\n\n  function addSmartContractListener() {\n    helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n      if (error) {\n        setStatus(\"😥 \" + error.message);\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"🎉 Your message has been updated!\");\n      }\n    });\n  }\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a\n            target=\"_blank\"\n            href={`https://metamask.io/download.html`}\n            rel=\"noreferrer\"\n          >\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onUpdatePressed = async () => {\n    //TODO: implement\n    const { status } = await updateMessage(walletAddress, newMessage);\n    setStatus(status);\n  };\n\n  //the UI of our component\n  return (\n    <div id=\"container\">\n      <img id=\"logo\" src={alchemylogo}></img>\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <h2 style={{ paddingTop: \"50px\" }}>Current Message:</h2>\n      <p>{message}</p>\n\n      <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\n\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Update the message in your smart contract.\"\n          onChange={(e) => setNewMessage(e.target.value)}\n          value={newMessage}\n        />\n        <p id=\"status\">{status}</p>\n\n        <button id=\"publish\" onClick={onUpdatePressed}>\n          Update\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default HelloWorld;\n"]},"metadata":{},"sourceType":"module"}